@page "/"
@inject NavigationManager navigation
@inject HomeRefreshService MyService

<PageTitle>Home</PageTitle>

<div style="display: flex; align-items: center;">
    <label class="k-label k-form-label" style="margin-right: 5px;">Search</label>
    <TelerikTextBox @bind-Value="@username" Width="10%"></TelerikTextBox>
    <span style="width: 5px;"></span>
    <TelerikButton OnClick="@OnSearchClick" ThemeColor="primary" Size="@ThemeConstants.Button.Size.Medium">Apply</TelerikButton>
</div>
<br/>
<TelerikCard>
    <div style="padding: 15px;">
        <div style="display: flex; justify-content: space-between; margin-right: 6.5%; margin-left: 6.5%;">
            <div style="display: flex; align-items: center;">
                <label class="k-label k-form-label" style="margin-right: 5px;">Filter</label>
                <TelerikTextBox @bind-Value="@FilterValue" Width="50%"></TelerikTextBox>
                <span style="width: 5px;"></span>
                <TelerikButton OnClick="@OnFilterClick" ThemeColor="primary" Size="@ThemeConstants.Button.Size.Medium">Apply</TelerikButton>
            </div>
            <TelerikButton OnClick="@NavToAddTask" ThemeColor="primary">Add Task</TelerikButton>
        </div>
        <br />
        <div style="display: flex; justify-content: space-around;">
            <TelerikCard>
                <div style="padding: 10px">
                    <TicketColumn Data="@TodoTickets" Title="To do"></TicketColumn>
                </div>
            </TelerikCard>
            <TelerikCard>
                <div style="padding: 10px">
                    <TicketColumn Data="@ProgressTickets" Title="In progress"></TicketColumn>
                </div>
            </TelerikCard>
            <TelerikCard>
                <div style="padding: 10px">
                    <TicketColumn Data="@DoneTickets" Title="Done"></TicketColumn>
                </div>
            </TelerikCard>
        </div>
    </div>
</TelerikCard>


@code {
    [CascadingParameter] private GlobalAppState? State { get; set; }
    private IEnumerable<GetTaskResponse>? TodoTickets { get; set; }
    private IEnumerable<GetTaskResponse>? ProgressTickets { get; set; }
    private IEnumerable<GetTaskResponse>? DoneTickets { get; set; }
    private string FilterValue = "";
    private int counter = 0;
    private string username = "";

    protected override async Task OnInitializedAsync()
    {
        if (counter < 1)
        {
            MyService.RefreshRequested += RefreshState;
            counter++;
        }

        try
        {
            if (State == null)
            {
                throw new NullReferenceException("State is null in Home");
            }

            if (State.IsLoggedIn)
            {
                await State.FetchTasksAsync();

                (TodoTickets, ProgressTickets, DoneTickets) = State.GetTasks();
            }
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void RefreshState()
    {
        try
        {
            if (State == null)
            {
                throw new NullReferenceException("State is null in Home in RefreshState");
            }

            (TodoTickets, ProgressTickets, DoneTickets) = State.GetTasks();

            this.StateHasChanged();
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        }
    }

    void NavToAddTask()
    {
        navigation.NavigateTo("AddTask");
    }

    void OnFilterClick()
    {
        try
        {
            if (State == null)
            {
                throw new NullReferenceException("State is null in Home page");
            }
            (TodoTickets, ProgressTickets, DoneTickets) = State.GetTasks(FilterValue);
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        }
    }

    async void OnSearchClick()
    {
        try
        {
            if (State == null)
            {
                throw new NullReferenceException("State is null in Home page");
            }

            if (State.IsLoggedIn)
            {
                await State.FetchTasksAsync(username);
                (TodoTickets, ProgressTickets, DoneTickets) = State.GetTasks();
            }

            StateHasChanged();
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        }
    }
}