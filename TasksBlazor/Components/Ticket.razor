@inject IMyService MyService
@inject NavigationManager Navigation

<div style="margin: 5px;">
    <TelerikCard Width="250px">
        <CardBody>
            <h6>@Data.Subject</h6>
        </CardBody>
        <CardActions Orientation="@CardOrientation.Horizontal" Layout="@CardActionsLayout.Stretch">
            <TelerikButton FillMode="@ThemeConstants.Button.FillMode.Solid" OnClick="@OnClickHandler">Details</TelerikButton>
            <TelerikDropDownList Data="@Statuses"
                                 @bind-Value="Data.Status"
                                 TextField="@nameof(Status.Name)"
                                 ValueField="@nameof(Status.Value)"
                                 OnChange="@OnBlurHandler">
            </TelerikDropDownList>
        </CardActions>
        <CardFooter>
            <Tags Data="Data.Categories" TaskId="Data.Id"></Tags>
        </CardFooter>
    </TelerikCard>
</div>


@code {
    [Parameter] public required GetTaskResponse Data { get; set; }
    [CascadingParameter] private GlobalAppState? State { get; set; }
    private IEnumerable<Status> Statuses { get; set; } = [ Status.ToDo, Status.Done, Status.InProgress ];
    private string? lastValue { get; set; }

    void OnClickHandler()
    {
        Navigation.NavigateTo($"/Details/{Data.Id}");
    }

    async void OnBlurHandler(object selected)
    {
        var currentValue = selected as string; 
        if (currentValue == lastValue)
        {
            return;
        }

        try
        {
            if (State == null)
            {
                throw new NullReferenceException("State is null in Ticket component");
            }

            var payload = new MoveTaskRequest { Status = Data.Status };
            var client = State.CreateClient();
            var response = await client.PatchAsJsonAsync($"Tasks/Move/{Data.Id}", payload);
            if (!response.IsSuccessStatusCode)
            {
                throw new BadHttpRequestException("Move request failed in Ticket component");
            }
            State.UpdateTicket(Data);
            lastValue = currentValue;
            MyService.CallRequestRefresh();
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        }
        catch (BadHttpRequestException ex)
        {
            Console.WriteLine(ex);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine(ex);
        }
    }
}
