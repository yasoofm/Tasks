@inject HomeRefreshService MyService
@inject NavigationManager Navigation

<div style="margin: 5px;">
    <TelerikCard Width="250px">
        <CardBody>
            <div style="display: flex; justify-content: space-between; width: 220px; align-items: center;">
                <h6 style="margin-bottom: 0;">@Data.Subject</h6>
                <TelerikButton 
                    FillMode="@ThemeConstants.Button.FillMode.Clear"
                    Size="@ThemeConstants.Button.Size.Small"
                    Rounded="@ThemeConstants.Button.Rounded.Full"
                               Icon="SvgIcon.X" OnClick="@OnRemoveHandle"></TelerikButton>
            </div>  
        </CardBody>
        <CardActions Orientation="@CardOrientation.Horizontal" Layout="@CardActionsLayout.Stretch">
            <div style="display: flex; flex-direction: column;">
                <TelerikRadioGroup Id="stat" Data="@Statuses"
                                   @bind-Value="@Data!.Status"
                                   TextField="@nameof(Status.Name)"
                                   ValueField="@nameof(Status.Value)"
                                   Layout="RadioGroupLayout.Horizontal"
                                   OnChange="@OnChangeHandler">
                </TelerikRadioGroup>
                <TelerikButton FillMode="@ThemeConstants.Button.FillMode.Solid" OnClick="@OnClickHandler">Details</TelerikButton>
            </div>
        </CardActions>
        <CardFooter>
            <Tags Data="Data.Categories" TaskId="Data.Id"></Tags>
        </CardFooter>
    </TelerikCard>
</div>


@code {
    [Parameter] public required GetTaskResponse Data { get; set; }
    [CascadingParameter] private GlobalAppState? State { get; set; }
    private IEnumerable<Status> Statuses { get; set; } = [Status.ToDo, Status.InProgress, Status.Done];
    private string? lastValue { get; set; }

    void OnClickHandler()
    {
        Navigation.NavigateTo($"/Details/{Data.Id}");
    }

    async void OnChangeHandler(object selected)
    {
        var currentValue = selected as string;
        if (currentValue == lastValue)
        {
            return;
        }
        try
        {
            if (State == null)
            {
                throw new NullReferenceException("State is null in Ticket component");
            }

            var payload = new MoveTaskRequest { Status = Data.Status };
            var client = State.CreateClient();
            var response = await client.PatchAsJsonAsync($"Tasks/Move/{Data.Id}", payload);
            if (!response.IsSuccessStatusCode)
            {
                throw new BadHttpRequestException("Move request failed in Ticket component");
            }
            State.UpdateTicket(Data);
            lastValue = currentValue;
            MyService.CallRequestRefresh();
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        }
        catch (BadHttpRequestException ex)
        {
            Console.WriteLine(ex);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine(ex);
        }
    }

    async void OnRemoveHandle()
    {
        try
        {
            if (State == null)
            {
                throw new NullReferenceException("State is null in Ticket component");
            }

            var client = State.CreateClient();
            var response = await client.DeleteAsync($"Tasks/{Data.Id}");

            if (response.IsSuccessStatusCode)
            {
                State.RemoveTicket(Data.Id);
                MyService.CallRequestRefresh();
            }
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        }
    }
}
